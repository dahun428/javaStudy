package com.dahun.bookstore.service;

import java.util.Arrays;

import com.dahun.bookstore.vo.Book;
import com.dahun.bookstore.vo.Rental;
import com.dahun.bookstore.vo.User;


//해야할일 대여중일때 대여되지 못하게 하기
//반납완료시 false 일때 더이상 반납하지 못하게 하기
public class BookstoreService {

	BookService bookService = new BookService();
	UserService userService = new UserService();
	RentalService rentalService = new RentalService();
	
	// 회원등록 서비스
	// 이름, 전화번호를 전달받아서 회원등록 서비스를 제공한다.
	// 		- User객체를 생성해서 이름과 전화번호를 저장한다.
	//		- 회원등록시 100포인트를 지급한다.
	//		- UserService의 회원등록 기능을 실행한다.
	public void addNewUser(String name, String tel) {
		User user = new User();
		user.setName(name);
		user.setTel(tel);
		user.setPoint(100);
		user.setDisabled(false);
		
		userService.insertUser(user);
	}
	
	// 회원조회 서비스
	// 회원번호를 전달받아서 회원번호에 대한 회원정보를 화면에 출력한다.
	//		- UserService의 회원조회기능을 실행해서 회원정보를 제공받는다.
	//		- 조회된 회원정보를 화면에 출력한다.
	public void retrieveUserInfo(int userNo) {
		User user = userService.findUserByNo(userNo);
		
		System.out.println();
		System.out.println("================================================");
		System.out.println("회원번호	회원이름	전화번호		잔여포인트	탈퇴여부");
		System.out.println("================================================");
		System.out.print(user.getNo()+"\t");
		System.out.print(user.getName()+"\t");
		System.out.print(user.getTel()+"\t");
		System.out.print(user.getPoint()+"\t");
		System.out.print(user.isDisabled()+"\t");
		
			
	}
	
	// 회원수정 서비스
	// 수정할 회원정보를 전달받아서 해당 회원의 정보를 수정한다.
	//		- UserService의 회원정보 변경기능을 실행해서 회원정보를 수정한다.
	public void modifyUserInfo(User user) {
		userService.updateUser(user);
	}
	
	// 회원탈퇴 서비스
	// 탈퇴처리할 회원번호를 전달받아서 해당 회원을 탈퇴처리한다.
	//		- UserService의 회원조회기능을 실행해서 회원정보를 제공받는다.
	//		- 조회된 회원의 탈퇴여부를 탈퇴처리로 변경한다.
	//		- RentalService의 반납기능을 실행해서 해당 회원이 대여중인 모든 책을 반납처리한다.
	public void disabledUser(int userNo) {
		User user = userService.findUserByNo(userNo);
		user.setDisabled(true);
		user.setPoint(0);
		rentalService.returnAllRentalByUserNo(user.no);
		
	}
	
	// 전체 회원조회 서비스
	// 등록된 모든 회원정보 조회를 처리한다.
	// 		- UserService의 모든 회원정보 조회기능을 실행해서 모든 회원정보를 제공받는다.
	//		- 조회된 회원정보를 화면에 출력한다.(null체크)
	public void retrieveAllUsers() {
		User[] userDB = userService.getAllUsers();

		System.out.println();
		System.out.println("================================================");
		System.out.println("회원번호	회원이름	전화번호		잔여포인트	탈퇴여부");
		System.out.println("================================================");
		for(int i = 0; i < userDB.length; i++) {
			System.out.println(userDB[i].getNo()+"\t"+userDB[i].getName()+"\t"+userDB[i].getTel()
					+"\t"+userDB[i].getPoint()+"\t"+userDB[i].isDisabled());
		}
	}
	
	// 도서등록 서비스
	// 제목, 저자, 가격을 전달받아서 도서 등록 서비스를 처리한다.
	//		- Book객체를 생성해서 제목, 저자, 가격 정보를 저장한다.
	//		- 재고는 10000권으로 한다.
	// 		- BookService의 도서등록기능을 실행한다.
	public void insertNewBook(String title, String writer, int price) {
		Book book = new Book();
		book.setTitle(title);
		book.setPrice(price);
		book.setWriter(writer);
		bookService.insertBook(book);
		
	}
	
	// 도서 검색 서비스
	// 제목를 전달받아서 도서 검색서비스를 처리한다.
	//		- BookService의 도서 검색기능을 실행해서 책정보를 제공받는다.
	//		- 조회된 책정보를 화면에 출력한다.
	public void searchBooks(String title) {
		System.out.println();
		System.out.println("================================================");
		System.out.println("도서번호	도서제목	저자	가격	재고");
		System.out.println("================================================");
		
		Book[] books = bookService.findBookByTitle(title);
			if(books != null) {
				for(Book book : books) {
					System.out.println(book.getNo()+"\t     "+book.getTitle()+"\t"+book.getWriter()
							+"\t"+book.getPrice()+"\t"+book.getStock());
					
				}
			}else {
				System.out.println("목록에 없는 서적입니다.");
			}
		
		
		
		
		
	}
	
	// 도서 정보 수정 서비스
	// 책정보를 전달받아서 책정보 수정서비스를 처리한다.
	//		- BookService의 책정보 수정기능을 실행한다.
	public void modifyBook(Book book) {
		bookService.updateBook(book);
	}
	
	// 전체도서 조회 서비스
	// 모든 책정보 조회 서비스를 처리한다.
	// 		- BookService의 모든 책조회 기능을 실행한다.
	public void retrieveAllBooks() {
		System.out.println();
		System.out.println("================================================");
		System.out.println("도서번호	도서제목		저자	가격	재고");
		System.out.println("================================================");
		Book[] books = bookService.getAllBooks();
		
		for(int i = 0; i < books.length; i++) {
			System.out.println(books[i].getNo()+"\t     "+books[i].getTitle()+"\t"+books[i].getWriter()
					+"\t"+books[i].getPrice()+"\t"+books[i].getStock());
		}
	}
	
	// 대여 서비스
	// 사용자번호와 책번호를 전달받아서 대여 서비스를 처리한다.
	//		- Rental객체를 생성해서 사용자번호, 책번호를 저장한다.
	//		- 대여여부는 대여중으로 설정한다.
	//		- 책재고 변경하기
	//			- BookService에서 책번호에 해당하는 책정보 조회기능 실행
	//			- 조회된 책의 재고를 1감소시킨다.
	public void rentBook(int userNo, int bookNo) {
		Rental rental = new Rental();
		//해야할일 대여된 도서는 대여되지 못하게한다.
		if(rental.isRent) {
			System.out.println("이미 대여된 도서입니다.");
		}else {
			rental.setUserNo(userNo);
			rental.setBookNo(bookNo);
			rental.setRent(true);
			rentalService.insertRental(rental);
			
			Book book = bookService.findBookByNo(bookNo);
			if(book != null) {
				book.stock--;
			}	
			
		}
		
	}
	
	// 반납 서비스
	// 대여번호를 전달받아서 반납 서비스를 처리한다.
	//		- RentalService에서 대여번호에 해당하는 대여정보 조회 기능을 실행
	//		- 조회된 대여정보의 반납여부를 false로 설정한다.
	//		- 사용자포인트 증가, 책재고 변경하기
	//			- UserService에서 사용자번호로 사용자정보 조회하기 실행
	//			- BookService에서 책번호로 책정보 조회하기 실행
	//			- 조회된 사용자의 포인트를 책가격의 1%만큼 증가시키기
	//			- 조회된 책정보의 재고를 1증가시키기
	public void returnBook(int no) {
		
		
		Rental rental = rentalService.findRentalByNo(no);
		if(rental != null) {
			rental.setRent(false);
			User user = userService.findUserByNo(rental.userNo);
			Book book = bookService.findBookByNo(rental.bookNo);
			user.point += book.price* 0.01;
			book.stock++;
			System.out.println("반납이 완료되었습니다.");
		}
		
	}
	
	// 대여현황 조회 서비스
	// 모든 대여정보를 조회하는 서비스를 처리한다.
	//		- RentalService의 전체 대여정보조회 기능을 실행한다.
	//		- 조회된 대여정보를 화면에 출력한다. (null체크)
	public void retrieveAllRentals() {
		Rental[] rental = rentalService.getAllRentals();
		System.out.println();
		System.out.println("================================================");
		System.out.println("대여번호	회원번호	도서번호	대여현황	");
		System.out.println("================================================");
		
		if(rental != null) {
			for(int i = 0; i < rental.length; i++) {
				System.out.println(rental[i].getNo()+"\t     "+rental[i].getUserNo()+"\t"
						+"\t"+rental[i].getBookNo()+"\t"+rental[i].isRent());
			}
		}
		
		
		
	}
	
	
}
