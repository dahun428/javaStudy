package com.sample.mall;

import java.util.Scanner;

import com.sample.mall.service.MallService;

public class MallApp {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		MallService service = new MallService();
		
		while(true) {
			System.out.println("##### 작은 쇼핑몰 #####");
			System.out.println("=================================================================================");
			System.out.println("1.모든 상품조회 2.상품상세조회 3.장바구니담기 4.내 장바구니 보기 5.구매하기 6.나의 구매내역 0.종료");
			System.out.println("=================================================================================");
			
			System.out.print("메뉴를 선택하세요: ");
			int menuNo = scanner.nextInt();
			
			if (menuNo == 1) {
				// 모든 상품을 조회하기
				// 입력값 없음
				
				System.out.println("=================================================================================");
				System.out.println("상품번호	상품명	가격	할인가격");
				System.out.println("=================================================================================");
				
				service.displayAllProducts();
				
				
			} else if (menuNo == 2) {
				// 상품상세정보 조회하기
				// 상품번호 입력받기			
				
				System.out.println();
				System.out.print("조회하고자 하는 상품 번호을 입력해주세요 : ");
				int productNo = scanner.nextInt();
				
				System.out.println("=================================================================================");
				System.out.println("상품번호	상품명	가격	할인가격	재고	판매지수");
				System.out.println("=================================================================================");
				
				service.displayProductDetail(productNo);
				
			} else if (menuNo == 3) {
				// 장바구니 담기
				// 사용자아이디, 상품번호 입력받기
				
				System.out.println();
				System.out.print("아이디를 입력해주세요 : ");
				String userId = scanner.next();
				System.out.print("상품 번호를 입력해주세요 : ");
				int productNo = scanner.nextInt();
				
				service.addCartItem(userId, productNo);
				
				
			} else if (menuNo == 4) {
				// 내장바구니 보기
				// 사용자아이디 입력받기
			} else if (menuNo == 5) {
				// 구매하기
				// 사용자아이디 입력받기
			} else if (menuNo == 6) {
				// 나의 구매내역 보기
				// 사용자아이디 입력받기
			} else if (menuNo == 0) {
				// 종료
				break;
			}
			System.out.println();
			System.out.println();
		}
		scanner.close();
		System.out.println("[프로그램 종료]");
	}
}
package com.sample.mall.service;

import com.sample.mall.repository.OrderRepository;
import com.sample.mall.repository.ProductRepository;
import com.sample.mall.repository.UserRepository;
import com.sample.mall.vo.Product;
import com.sample.mall.vo.User;

public class MallService {

	private OrderRepository orderRepo = new OrderRepository();
	private ProductRepository productRepo = new ProductRepository();
	private UserRepository userRepo = new UserRepository();
	
	/**
	 * 모든 상품정보를 화면에 표시한다.<br/>
	 * 출력내용 :: 상품번호, 상품명, 가격, 할인가격 정보를 표시한다.<br /><br />
	 * 
	 * ProductRepository의 모든 상품정보 조회기능을 실행해서 상품정보 배열(Product가 저장된 배열)을 제공받아서 표시한다.
	 */
	public void displayAllProducts() {
		
		Product[] products = productRepo.getAllProducts();
		for(int i = 0; i < products.length; i++) {
			System.out.println(products[i].getNo()+"\t"+products[i].getName()
				+"+\t"+products[i].getPrice()+"\t"+products[i].getDiscountPrice());
		}
		
	}
	
	/**
	 * 상품번호를 전달받아서 그 상품번호에 해당하는 상품의 상세정보를 화면에 표시한다.<br/>
	 * 출력내용 :: 상품번호, 상품명, 가격, 할인가격, 재고, 판매지수 정보를 표시한다.<br /><br />
	 * 
	 * ProductRepository의 상품상세정보 조회 기능에 상품번호를 전달해서 상품정보(Product객체)를 제공받아서 표시한다.
	 * @param productNo 상세정보를 조회할 상품번호
	 */
	public void displayProductDetail(int productNo) {
		
		if(productRepo.getProductByNo(productNo) == null) {
			System.out.println("찾으시는 상품이 없습니다. 다시 입력해주세요");
			return;
		}
		Product product = productRepo.getProductByNo(productNo);
		System.out.println(product.getNo()+"\t"+product.getName()
				+"\t"+product.getPrice()+"\t"+product.getDiscountPrice()+"\t"
				+product.getStock()+"\t"+product.getScore());
	}
	
	/**
	 * 사용자 아이디와 상품번호를 전달받아서 해당 사용자의 장바구니에 상품정보를 저장한다.<br/>
	 * 사용자의 장바구니에 동일한 상품이 존재하는 경우는 장바구니에 추가되지 않는다.<br/>
	 * 상품의 재고가 0개인 경우는 장바구니에 추가되지 않는다.<br /><br />
	 * 
	 * UserRepository의 사용자정보 조회 기능에 사용자 아이디를 전달해서 사용자정보(User객체)를 제공받는다.<br/>
	 * Item객체를 생성해서 상품번호, 상품명, 구매가격을 저장한다.<br/>
	 * User객체의 장바구니 아이템 추가 기능에 생성된 Item을 전달해서 장바구니에 추가한다.<br/>
	 * ProductRepository의 상품상제정보 조회기능을 실행해서 상품정보(Product객체)를 제공받는다.
	 * 상품의 재고를 1감소시킨다.
	 * @param userId 사용자 아이디
	 * @param productNo 장바구니에 추가할 상품번호
	 */
	public void addCartItem(String userId, int productNo) {
		User user = userRepo.getUserById(userId);
		if(user == null) {
			System.out.println("존재하지 않은 사용자입니다. 다시 입력해주세요");
			return;
		}
		
		Product product = productRepo.getProductByNo(productNo);
		if(product == null) {
			System.out.println("존재하지 않은 상품입니다. 다시 입력해주세요");
			return;
		}
		Product[] products = productRepo.getAllProducts();
		for(int i = 0; i < products.length; i++) {
			if(products[i].getNo() == productNo) {
				System.out.println("이미 장바구니에 존재하는 상품입니다.");
				return;
			}
		}
		if(product.getStock() == 0) {
			System.out.println("재고가 없습니다.");
			return;
		}
		
		userRepo.insertItemByNo(product.getNo());
		
		//상품을 저장한다. 배열에. 0번째 말고 position부터 . '상품정보'를. 장바구니에
		
		
		
	}
	
	/**
	 * 사용자 아이디를 전달받아서 그 사용자의 장바구니에 저장된 모든 상품정보를 화면에 출력한다.<br />
	 * 표시내용 :: 아이템번호, 상품번호, 상품명, 구매가격 정보를 표시한다.<br /><br />
	 * 
	 * UserRepository의 사용자정보 조회 기능에 사용자 아이디를 전달해서 사용자정보(User객체)를 제공받는다.<br />
	 * User객체의 장바구니 아이템조회기능을 사용해서 모든 Item정보를 제공받고 화면에 출력한다.
	 * @param userId 장바구니에 저장될 상품 정보를 조회할 사용자 아이디
	 */
	public void displayMyCart(String userId) {
		
	}
	
	
	/**
	 * 사용자 아이디를 전달받아서 그 사용자의 장바구니에 저장된 모든 상품을 주문한다.<br /><br />
	 * 
	 * UserRepository의 사용자정보 조회 기능에 사용자 아이디를 전달해서 사용자정보(User객체)를 제공받는다.<br />
	 * <ol>
	 * <li>Order객체를 생성하고, 사용자 아이디를 저장한다.</li>
	 * <li>위에서 조회된 User객체의 장바구니에서 Item객체를 하나씩 꺼낸다.
	 * 	<ol>
	 * 		<li>Item객체에서 구매가격를 꺼낸다.</li>
	 * 		<li>구매가격의 1%만큼 포인트를 위에서 조회한 User객체의 포인트에 적립한다.</li>
	 * 		<li>Item객체를 Order객체의 items배열에 저장한다.</li>
	 * 	</ol>
	 * </li>
	 * <li>위에서 생성한 Order객체를 OrderRepository의 주문저장기능에 전달해서 저장되게 한다.</li>
	 * <li>User객체의 장바구니 비우기 기능을 실행한다.</li>
	 * </ol>
	 * @param userId 장바구니에 저장된 모든 상품정보를 주문하고 싶어하는 사용자 아이디
	 */
	public void cartToOrder(String userId) {
		
	}
	
	/**
	 * 사용자 아이디를 전달받아서 그 사용자의 모든 주문내역을 화면에 출력한다.<br/><br/>
	 * 
	 * OrderRepository의 주문내역조회 기능에 사용자 아이디를 전달해서 그 사용자의 모든 주문정보(Order배열)를 제공받아서 출력한다.
	 * @param userId
	 */
	public void displayMyOrders(String userId) {
		
	}
}
package com.sample.mall.repository;

import com.sample.mall.vo.Product;

public class ProductRepository {

	private Product[] db = new Product[20];
	private int position = 0;
	private int sequence = 10001;
	
	public ProductRepository() {
		db[position++] = new Product(sequence++, "아이패드", 1000000, 900000, 100, 0);
		db[position++] = new Product(sequence++, "갤럭시20", 1600000, 1400000, 100, 0);
		db[position++] = new Product(sequence++, "아이폰X", 1400000, 1300000, 100, 0);
		db[position++] = new Product(sequence++, "아이폰11", 1600000, 1500000, 100, 0);
		db[position++] = new Product(sequence++, "맥북프로", 2600000, 2300000, 100, 0);
		db[position++] = new Product(sequence++, "맥북에어", 1300000, 1100000, 100, 0);
		db[position++] = new Product(sequence++, "에어팟프로", 340000, 310000, 100, 0);
	}
	
	//모든 상품 조회
	public Product[] getAllProducts() {
		Product[] products = new Product[position];
		for(int i = 0; i < position; i++) {
			products[i] = db[i];
		}
		return products;
	}
	//개별 상품 조회
	public Product getProductByNo(int productNo) {
		
		Product product = null;
		for(int i = 0; i < position; i++) {
			if(productNo == db[i].getNo()) {
				product = db[i];
				break;
			}
		}
		return product;
	}
//	public Product insertProductByNo(Product product) {
//		
//		return null;
//	}
	
	
	
}
package com.sample.mall.repository;

import com.sample.mall.vo.Order;

public class OrderRepository {

	private Order[] db = new Order[20];
	private int position = 0;
	private int sequence = 30001;
	
	/**
	 * 주문정보(Order객체)를 전달받아서 배열에 저장한다.<br />
	 * 
	 * 주문객체에 주문번호를 저장한다<br/>
	 * 배열에 저장하고, 포지션과 시퀀스를 1씩 증가시킨다.
	 * @param order
	 */
	public void insertOrder(Order order) {
		
	}
	
	/**
	 * 전달받은 사용자아이디의 모든 주문내역정보를 반환한다.<br />
	 * 
	 * 배열에서 주문자아이디가 전달받은 userId와 일치하는 Order객체를 찾아서 새로운 배열에 담아서 반환한다.
	 * @param userId
	 * @return
	 */
	public Order getOrderByUserId(String userId) {
		return null;
	}
	
	
}
package com.sample.mall.repository;

import com.sample.mall.vo.Item;
import com.sample.mall.vo.User;

public class UserRepository {

	private User[] db = new User[20];
	private int position = 0;
	
	public UserRepository() {
		db[position++] = new User("hong", "홍길동", 100);
		db[position++] = new User("kim", "김유신", 0);
		db[position++] = new User("kang", "강감찬", 100);
		db[position++] = new User("riuy", "류관순", 100);
		db[position++] = new User("leee", "이순신", 100);
	}
	
	/**
	 * 사용자 아이디를 전달받아서 User객체를 반환한다.
	 * @param userId 조회할 사용자 아이디
	 * @return 사용자정보가 저장된 User객체
	 */
	public User getUserById(String userId) {
		User user = null;
		for(int i = 0; i < position; i++) {
			if(userId.equals(db[i].getId())) {
				user = db[i];
				break;
			}
		}
		return user;
	}
	
	public User insertItemByNo(int productNo) {
		
		
		return null;
	}
	
}
